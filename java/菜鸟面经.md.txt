1.private、public、default、和protected的作用类
作用域         当前类  同一package其他  子孙类 其他package
public          √         √                           √           √
protected    √         √                          √           ×
default        √           √                         ×           ×
private       √          ×                           ×          ×

2.object类有哪些方法
1. getClass()  
2. hashCode()  
3. equals()  
4. toString()  
5. clone()  
6. wait()...  
7. notify()  
8. notifyAll()  
9. finalize()  

protected  Object 
clone() 	  创建并返回此对象的一个副本。
 boolean 
equals(Object obj) 	  指示某个其他对象是否与此对象“相等”。
protected  void 
finalize()  	  当垃圾回收器确定不存在对该对象的更多引用时，由对象的垃圾回收器调用此方法。
 Class<?  extendsObject> getClass()   	  返回一个对象的运行时类。
 int 
hashCode()  	  返回该对象的哈希码值。
 void 
notify()     	  唤醒在此对象监视器上等待的单个线程。
 void notifyAll()  	  唤醒在此对象监视器上等待的所有线程。
 String 
toString()       	  返回该对象的字符串表示。
 void 
wait()  	  导致当前的线程等待，直到其他线程调用此对象的 notify() 方法或 notifyAll() 方法。
 void 
wait(long timeout)    	  导致当前的线程等待，直到其他线程调用此对象的 notify() 方法或 notifyAll() 方法，或者超过指定的时间量。
 void 
wait(long timeout,  int nanos)          	  导致当前的线程等待，直到其他线程调用此对象的 notify() 方法或 notifyAll() 方法，或者其他某个线程中断当前线程，或者已超过某个实际时间量。

3七层模型，亦称OSI（Open System Interconnection）参考模型，是参考模型是国际标准化组织（ISO）制定的一个用于计算机或通信系统间互联的标准体系。

应用层
网络服务与最终用户的一个接口。
协议有：HTTP FTP TFTP SMTP SNMP DNS TELNET HTTPS POP3 DHCP
表示层
数据的表示、安全、压缩。（在五层模型里面已经合并到了应用层）
格式有，JPEG、ASCll、DECOIC、加密格式等
会话层
建立、管理、终止会话。（在五层模型里面已经合并到了应用层）
对应主机进程，指本地主机与远程主机正在进行的会话
传输层
定义传输数据的协议端口号，以及流控和差错校验。
协议有：TCP UDP，数据包一旦离开网卡即进入网络传输层
网络层
进行逻辑地址寻址，实现不同网络之间的路径选择。
协议有：ICMP IGMP IP（IPV4 IPV6） ARP RARP
数据链路层
建立逻辑连接、进行硬件地址寻址、差错校验 [2]  等功能。（由底层网络定义协议）
将比特组合成字节进而组合成帧，用MAC地址访问介质，错误发现但不能纠正。
物理层
建立、维护、断开物理连接。（由底层网络定义协议）
TCP/IP 层级模型结构，应用层之间的协议通过逐级调用传输层（Transport layer）、网络层（Network Layer）和物理数据链路层（Physical Data Link）而可以实现应用层的应用程序通信互联。
应用层需要关心应用程序的逻辑细节，而不是数据在网络中的传输活动。应用层其下三层则处理真正的通信细节。在 Internet 整个发展过程中的所有思想和着重点都以一种称为 RFC（Request For Comments）的文档格式存在。针对每一种特定的 TCP/IP 应用，有相应的 RFC [3]  文档。
一些典型的 TCP/IP 应用有 FTP、Telnet、SMTP、SNTP、REXEC、TFTP、LPD、SNMP、NFS、INETD 等。RFC 使一些基本相同的 TCP/IP 应用程序实现了标准化，从而使得不同厂家开发的应用程序可以互相通信

4.TCP/UDP
TCP 和 UDP 的区别

TCP 是面向连接的，UDP 是面向无连接的
UDP程序结构较简单

TCP 是面向字节流的，UDP 是基于数据报的
TCP 保证数据正确性，UDP 可能丢包
TCP 保证数据顺序，UDP 不保证
什么是面向连接，
什么是面向无连接

在互通之前，面向连接的协议会先建立连接，如 TCP 有三次握手，而 UDP 不会


TCP 为什么是可靠连接



通过 TCP 连接传输的数据无差错，不丢失，不重复，且按顺序到达。

TCP 报文头里面的序号能使 TCP 的数据按序到达
报文头里面的确认序号能保证不丢包，
累计确认及超时重传机制

TCP 拥有流量控制及拥塞控制的机制

TCP 的顺序问题，丢包问题，流量控制都是通过滑动窗口来解决的 
拥塞控制时通过拥塞窗口来解决的
TCP建立连接需要三次我首页，断开连接需要四次握手。

